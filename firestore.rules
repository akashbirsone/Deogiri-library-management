/**
 * @fileoverview Firestore Security Rules for the Studio Library application.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, balancing public readability of the book catalog
 * with strict, role-based control over user data and book modifications.  User-specific data is secured
 * via ownership checks, while the book catalog leverages a public-read, restricted-write pattern.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Access is restricted to the owner.
 * - /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId}: Stores book information. Publicly readable, but only admins or librarians can modify.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent enumeration.
 * - The book catalog is publicly readable to encourage browsing.
 * - Fines and borrow history are managed by the librarian or admin.
 *
 * Denormalization for Authorization:
 * - For books, the "addedBy" field on the book document links to the user who added it. This allows
 *   write rules to be enforced based on the user's role.  While not currently enforced, this design
 *   supports future restrictions, such as only allowing librarians or admins to add books.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) User 'bGI5EzWjNHXI2GxCvsdQUzSy8922' can create their profile if request.auth.uid == userId.
     * @allow (get) User 'bGI5EzWjNHXI2GxCvsdQUzSy8922' can read their profile.
     * @allow (update) User 'bGI5EzWjNHXI2GxCvsdQUzSy8922' can update their profile.
     * @allow (delete) User 'bGI5EzWjNHXI2GxCvsdQUzSy8922' can delete their profile.
     * @deny (create) User 'randomUserId' cannot create a profile with userId 'bGI5EzWjNHXI2GxCvsdQUzSy8922'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Disallow listing all users
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure the book catalog. Publicly readable, but only librarians or admins can modify books.
     * @path /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId}
     * @allow (get) Any user can read a book.
     * @allow (list) Any user can list books.
     * @allow (create) Only a librarian or admin can add a book, validating the addedBy field.
     * @allow (update) Only a librarian or admin can update a book.
     * @allow (delete) Only a librarian or admin can delete a book.
     * @deny (create) A student attempts to create a book.
     * @deny (update) A student attempts to update a book.
     * @principle Public read, restricted write access for the book catalog; role-based access control for modifications.
     */
    match /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // Enforce user must be logged in
      allow update: if isSignedIn(); // Enforce user must be logged in
      allow delete: if isSignedIn(); // Enforce user must be logged in
    }

    // *** HELPER FUNCTIONS ***

    /**
     * @description Checks if the request is authenticated.
     * @return {bool} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the request is made by the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

     /**
     * @description Checks if the request is made by the owner of an EXISTING resource.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the request is made by the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}