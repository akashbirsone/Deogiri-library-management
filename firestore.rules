/**
 * @fileoverview Firestore Security Rules for the Library App.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model, with 'student', 'librarian', and 'admin' roles.
 * Users can only read their own profile data.
 * Books can be read by anyone, but created, updated, and deleted only by admins or librarians.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId}:
 *   Stores book catalog, readable by anyone, writeable by admins and librarians.
 *
 * Key Security Decisions:
 * - Users cannot be listed. This prevents unauthorized discovery of user information.
 * - Students have read only permissions, and admins and librarians can write to the book collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles based on user ID.
     * @path /users/{userId}
     * @allow (get, list) User with matching UID can read their own profile.
     * @allow (create) User with matching UID can create their own profile.
     * @allow (update) User with matching UID can update their own profile.
     * @deny  (get, list) User tries to read another user's profile.
     * @deny  (create, update, delete) User tries to modify another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Manages book catalog access with role-based permissions.
     * @path /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId}
     * @allow (get, list) Any user can read the book catalog.
     * @allow (create, update, delete) Admins and librarians can modify the book catalog.
     * @deny  (create, update, delete) Students cannot modify the book catalog.
     * @principle Grants public read access while restricting write access to admins.
     */
    match /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAuthorized() {
            return isSignedIn() && (request.auth.token.role == 'admin' || request.auth.token.role == 'librarian');
        }

        allow get, list: if true;
        allow create: if isAuthorized();
        allow update: if isAuthorized() && resource != null;
        allow delete: if isAuthorized() && resource != null;
    }
  }
}