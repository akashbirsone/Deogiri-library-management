rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the resource and it exists.
     * @param {string} userId The user ID to compare against the resource's owner ID.
     * @return {boolean} True if the user is the existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId);
    }

    /**
     * @description Checks if the current user has the 'librarian' role.
     * @return {boolean} True if the user has the 'librarian' role, false otherwise.
     */
    function isLibrarian() {
      return isSignedIn() && (request.auth.token.role == 'librarian' || request.auth.token.role == 'admin');
    }

     /**
     * @description Checks if the current user has the 'admin' role.
     * @return {boolean} True if the user has the 'admin' role, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'admin';
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (read, write) if isOwner(userId)
     * @deny (read, write) if !isOwner(userId)
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the book catalog.
     * @path /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId}
     * @allow (read) Everyone can read the books catalog
     * @allow (create, update, delete) only librarian or admin can modify books
     * @deny (create, update, delete) if not librarian or admin
     * @principle Restricts write access to librarians and admins.
     */
    match /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId} {
      allow get, list: if true;
      allow create: if isLibrarian();
      allow update: if isLibrarian();
      allow delete: if isLibrarian();
    }

    //The following rule was shadowed, so I removed it.
    // match /{path=**}/books/{bookId} {
    //      allow get, list: if true;
    // }
  }
}