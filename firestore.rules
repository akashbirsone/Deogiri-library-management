/**
 * @fileoverview Firestore Security Rules for the library application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model, with a strict separation of permissions based on user roles (student, librarian, admin).
 * User data is private and only accessible to the owning user or admins.
 *
 * Data Structure:
 * - /users/{userId}: Stores profile information for each user.
 * - /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId}: Stores the library's book catalog in a hierarchical structure.
 *
 * Key Security Decisions:
 * - Users can only read their own profile data.
 * - Only authenticated users can access any data.
 * - Data validation is relaxed in this prototype to allow flexibility and fast iteration.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Users can only read their own profile data. Admins can read all profiles.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User with ID 'test_user' can read their own profile: auth.uid == 'test_user'.
     * @deny (get) User with ID 'other_user' cannot read 'test_user' profile: auth.uid != 'test_user'.
     * @principle Enforces document ownership for user profiles and validates relational integrity.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure the book catalog. Anyone can read books, but writes are not allowed.
     * @path /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId}
     * @allow (get, list) Any authenticated user can read book data.
     * @deny (create, update, delete) No one can create, update, or delete books.
     * @principle Public read access with restricted write access.
     */
    match /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}