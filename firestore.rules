/**
 * @fileoverview Firestore Security Rules for the Library Application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model, granting different levels of
 * access based on a user's role (student, librarian, or admin). User data is secured
 * under the `/users/{userId}` path, with ownership enforced. The book catalog is structured
 * hierarchically and allows public read access, but write access is limited to librarians and admins.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile information.
 * - `/departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId}`:
 *   Stores book catalog data, organized by department, course, semester, and subject.
 *
 * Key Security Decisions:
 * - User listing is disabled to prevent information harvesting.
 * - Public read access is granted for the book catalog, but write access is restricted.
 * - Data validation is minimized in this prototyping phase to allow flexible data shapes.
 *
 * Denormalization for Authorization:
 *  None used.
 * Structural Segregation:
 * None used.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId - The user ID to check against the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     * @param {string} userId - The user ID to check against the request's authentication UID and to ensure the document exists.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the librarian role.
     * @return {boolean} True if the user is a librarian, false otherwise.
     */
    function isLibrarian() {
      return request.auth.token.role == 'librarian';
    }

    /**
     * @description Checks if the user has the admin role.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return request.auth.token.role == 'admin';
    }

    /**
     * @description Checks if the user is a librarian or an admin.
     * @return {boolean} True if the user is a librarian or an admin, false otherwise.
     */
    function isLibrarianOrAdmin() {
      return isLibrarian() || isAdmin();
    }

    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth UID.
     * @allow (get) - A user can read their own profile.
     * @allow (update) - A user can update their own profile.
     * @allow (delete) - A user can delete their own profile.
     * @deny (create) - A user cannot create a profile for another user (userId mismatch).
     * @deny (list) - Users cannot list all user profiles.
     * @principle Enforces document ownership for user profiles and restricts listing.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the book catalog, organized by department, course, semester, subject, and book.
     * @path /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId}
     * @allow (get) - Anyone can read a book's information.
     * @allow (list) - Anyone can list books.
     * @allow (create) - Only librarians or admins can add new books. The 'addedBy' field must match their UID.
     * @allow (update) - Only librarians or admins can update book information.
     * @allow (delete) - Only librarians or admins can delete books.
     * @deny (create) - Students cannot add new books.
     * @deny (update) - Students cannot update book information.
     * @deny (delete) - Students cannot delete books.
     * @principle Grants public read access while restricting write access to authorized roles (librarians and admins).
     */
    match /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isLibrarianOrAdmin();
      allow update: if isSignedIn() && isLibrarianOrAdmin() && resource != null;
      allow delete: if isSignedIn() && isLibrarianOrAdmin() && resource != null;
    }

    /**
     * @description Rules for accessing any book document in any book collection. This rule addresses the "Missing or insufficient permissions" error for collectionGroup 'books'.
     * @path /books
     * @allow (list) - Anyone can list books.
     * @deny (get) - Getting is denied.
     * @deny (create) - Creating is denied.
     * @deny (update) - Updating is denied.
     * @deny (delete) - Deleting is denied.
     * @principle Grants public read access while restricting write access to authorized roles (librarians and admins).
     */
    match /books/{bookId} {
      allow list: if true;
      allow get, create, update, delete: if false;
    }
  }
}