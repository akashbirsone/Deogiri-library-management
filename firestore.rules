/**
 * @description This ruleset enforces a strict user-ownership model for user profiles and allows public read access to the book catalog while restricting write access.
 * @dataStructure
 *   - User profiles are stored under `/users/{userId}`.
 *   - Books are stored in a hierarchical structure: `/departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId}`.
 * @keySecurityDecisions
 *   - Users can only read and write their own profile data.
 *   - The book catalog is publicly readable, but write access is restricted to authorized users (implementation pending - TODO).
 *   - Listing of user documents is forbidden to prevent data leakage.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - A user can only read, update, or delete their own profile.
     * @deny (create) - A user cannot create a profile for another user.
     * @deny (get, update, delete) - A user cannot read, update, or delete another user's profile.
     * @deny (list) - Listing all user documents is not allowed.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the book catalog.
     * @path /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId}
     * @allow (get, list) - Any user can read book information.
     * @deny (create, update, delete) - Only authorized users can modify the book catalog (authorization logic to be implemented).
     * @principle Allows public read access but restricts write access to authorized users.
     */
    match /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement write access control for authorized users (e.g., librarians, admins).
    }


    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}