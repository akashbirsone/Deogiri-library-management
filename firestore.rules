/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for a library application.
 * All data is stored in a hierarchical structure under `/departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId}` for books and `/users/{userId}` for user profiles.
 *
 * Key Security Decisions:
 * - Users can only read their own profile data.
 * - Only librarians and admins can create, update, or delete books.
 * - Students cannot list books.
 * - Data validation is relaxed during prototyping to facilitate rapid development.
 *
 * Denormalization for Authorization:
 * - Book documents do not contain ownership information, but write access is controlled based on the user's role.
 *
 * Structural Segregation:
 * - User profiles and book catalogs are stored in separate top-level collections to simplify access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read their own profile data, but restricts write access to admins.
     * @path /users/{userId}
     * @allow (get, list) if isSignedIn() && isOwner(userId)
     * @allow (create, update, delete) if isSignedIn() && isAdmin()
     * @deny (get, list) if !isSignedIn()
     * @deny (create, update, delete) if !isSignedIn() || !isAdmin()
     * @principle Enforces user-ownership for reads and admin-only access for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Manages access control for the book catalog based on user roles.
     * @path /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId}
     * @allow (get) if true;
     * @allow (list) if isSignedIn() && (isLibrarian() || isAdmin());
     * @allow (create) if isSignedIn() && (isLibrarian() || isAdmin());
     * @allow (update) if isSignedIn() && (isLibrarian() || isAdmin()) && resource != null;
     * @allow (delete) if isSignedIn() && (isLibrarian() || isAdmin()) && resource != null;
     * @deny (create, update, delete) if !isSignedIn() || !(isLibrarian() || isAdmin());
     * @principle Enforces role-based access control for books.
     */
    match /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId} {
      allow get: if true;
      allow list: if isSignedIn() && (isLibrarian() || isAdmin());
      allow create: if isSignedIn() && (isLibrarian() || isAdmin());
      allow update: if isSignedIn() && (isLibrarian() || isAdmin()) && resource != null;
      allow delete: if isSignedIn() && (isLibrarian() || isAdmin()) && resource != null;
    }


    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the 'admin' role.
     * @return {boolean} True if the user has the 'admin' role, false otherwise.
     */
    function isAdmin() {
      return request.auth.token.role == 'admin';
    }

     /**
      * @description Checks if the user has the 'librarian' role.
      * @return {boolean} True if the user has the 'librarian' role, false otherwise.
      */
    function isLibrarian() {
      return request.auth.token.role == 'librarian';
    }
  }
}