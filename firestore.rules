/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model, with specific rules for user profiles and the book catalog.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Access is restricted to the user themselves (owner-only).
 * - /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId}: Stores book information.  Create operations are allowed for any authenticated user. Update and delete are disallowed.
 *
 * Key Security Decisions:
 * - User data is private and only accessible to the owning user.
 * - Book catalog entries can be created by admins or librarians.
 * - Listing of users is disallowed for privacy reasons.
 * - No data validation is performed in this prototyping phase, except for critical ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Verifies user authentication.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Enforces document ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the resource and that the resource exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines rules for user documents.
     * @path /users/{userId}
     * @allow (create) If the user's UID matches the userId in the path.
     * @allow (get, update, delete) If the user is the owner of the document.
     * @deny (create, update, delete) If the user is not the owner of the document.
     * @principle Enforces user-ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines rules for book documents within the catalog.
     * @path /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId}
     * @allow (get, list) Public read access to the book catalog.
     * @allow (create) Any authenticated user can create a book entry. The addedBy field should match the users email.
     * @deny (update, delete) Book updates and deletes are not allowed.
     * @principle Allows public read access but restricts writes to authenticated users.
     */
    match /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.addedBy == request.auth.email;
      allow update: if false;
      allow delete: if false;
    }
  }
}