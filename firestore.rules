/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for a library application.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. Access is restricted to the owning user.
 * - /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId}: Stores book catalog data. Public read access is allowed, but write access is restricted to authorized librarians.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - The book catalog is publicly readable.
 * - Only authenticated librarians can add, modify, or delete books.
 * - No user listing is allowed for privacy.
 * - Fines and BorrowHistory are not validated.
 *
 * Denormalization for Authorization:
 * - The 'book' entity includes an 'addedBy' field, which will be set to the librarian's UID upon creation.
 *   This allows for efficient rule enforcement of write access to books.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated (user is signed in).
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is a librarian.
     * @returns {boolean} True if the user has the "librarian" role, false otherwise.
     */
    function isLibrarian() {
      return isSignedIn() && (request.auth.token.role == 'librarian' || request.auth.token.role == 'admin');
    }

    /**
     * @description Checks if the user is the owner and if the resource exists
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching UID can create their profile.
     * @allow (get, update, delete) - Authenticated user can access/modify their own profile.
     * @deny (create) - User tries to create a profile with a different UID.
     * @deny (get, update, delete) - User tries to access/modify another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the book catalog.
     * @path /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId}
     * @allow (get, list) - Anyone can read the book catalog.
     * @allow (create) - Only authenticated librarians can add books, ensuring 'addedBy' matches their UID.
     * @allow (update, delete) - Only authenticated librarians who added the book can modify or delete it.
     * @deny (create, update, delete) - Non-librarians cannot modify the book catalog.
     * @principle Allows public read access to the book catalog while restricting write access to authorized librarians.
     */
    match /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId} {
      allow get, list: if true;
      allow create: if isLibrarian();
      allow update: if isLibrarian();
      allow delete: if isLibrarian();
    }

    match /{path=**}/books/{document} {
          allow list: if true;
          allow get: if true;
          allow create: if false;
          allow update: if false;
          allow delete: if false;
        }
  }
}