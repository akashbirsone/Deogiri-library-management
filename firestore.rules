/**
 * @fileoverview Firestore Security Rules for the Library App Prototype.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict user-ownership and role-based access control.
 * All write operations are carefully guarded, while read operations are more open where appropriate.
 *
 * Data Structure:
 * - Users: `/users/{userId}` - Each user has their own document.
 * - Books: `/departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId}` - Books are organized hierarchically.
 *
 * Key Security Decisions:
 * - Users can only list users collection as admin, no other user roles are permitted
 * - Read access to the book catalog is public.
 *
 * Denormalization for Authorization:
 *  - The rules use the role claim on the user's document for role-based authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user documents based on ownership.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching UID can create their own document.
     * @allow (get, update, delete) - Authenticated user can get, update, and delete their own document.
     * @deny (create) - If the user attempts to create a document with a mismatched UID.
     * @deny (get, update, delete) - If a user attempts to access another user's document.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isAdmin(); // Only admins can list users

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants public read access to the book catalog and restricts writes to authorized users.
     * @path /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId}
     * @allow (get, list) - Any user can read book information.
     * @allow (create, update, delete) - Only authorized users (e.g., librarians, admins) can modify the book catalog.
     * @deny (create, update, delete) - Unauthorized users cannot modify the book catalog.
     * @principle Allows public read access while restricting write access based on authorization.
     */
    match /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return request.auth.token.role == 'admin';
        }

        function isLibrarian() {
            return request.auth.token.role == 'librarian';
        }

        allow get: if true;
        allow list: if true;

        // Allowing Librarian and Admin roles to create, update and delete.
        allow create: if isSignedIn() && (isAdmin() || isLibrarian());
        allow update: if isSignedIn() && (isAdmin() || isLibrarian());
        allow delete: if isSignedIn() && (isAdmin() || isLibrarian());
    }
  }
}