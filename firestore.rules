/**
 * @fileoverview Firestore Security Rules for the library application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and public read access for the book catalog.
 *
 * Data Structure:
 * - Users are stored in `/users/{userId}`.
 * - Books are stored in `/books/{bookId}`.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - The book catalog is publicly readable, but only authorized users can modify it.
 *
 * Denormalization for Authorization:
 *  - User roles are stored directly in the user document for easy access.
 *
 * Structural Segregation:
 *  - There is no segregation of public and private content in this initial ruleset.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, update, delete) User with matching UID can read and modify their own profile.
     *   Example: User with UID "user123" can read and update data at /users/user123.
     * @allow (create) Any signed-in user can create their own profile.
     *   Example: A signed-in user with UID "user456" can create a profile at /users/user456.
     * @deny (get, update, delete) User with mismatched UID cannot access another user's profile.
     *   Example: User with UID "user123" cannot read or modify data at /users/user456.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // No listing of all users.

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to books, but restricts modifications to authorized users.
     * @path /books/{bookId}
     * @allow (get, list) Any user can read the book catalog.
     *   Example: Any user, signed in or not, can read the book data at /books/book123.
     * @deny (create, update, delete) Only authorized users can modify the book catalog.  No authorization implemented.
     *   Example: A user, regardless of their role, cannot create, update, or delete books.
     * @principle Public read access with owner-only writes (currently no ownership implemented).
     */
    match /books/{bookId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once authorization is implemented.
    }
  }
}