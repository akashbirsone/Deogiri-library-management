/**
 * @description This ruleset enforces a role-based access control model for a library management system.
 *              Users can have roles of 'student', 'librarian', or 'admin'.
 *              Students can only read book information. Librarians and admins can manage books.
 * @dataStructure
 *   - /users/{userId}: Stores user profile information, including role.
 *   - /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId}: Stores book details.
 * @keySecurityDecisions
 *   - Only authenticated users can access any data.
 *   - Users can only read their own user document.
 *   - Book creation, updating, and deletion are restricted to librarians and admins.
 *   - Listing of users is disallowed for security reasons.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read their own profile information.
     * @path /users/{userId}
     * @allow (get) User with uid 'user123' can read /users/user123.
     * @deny (get) User with uid 'user456' cannot read /users/user123.
     * @allow (create) User with uid 'user123' can create /users/user123.
     * @deny (create) User with uid 'user456' cannot create /users/user123.
     * @deny (update) Any user cannot update another user's profile.
     * @deny (delete) Any user cannot delete another user's profile.
     * @principle Enforces user-ownership.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read books, but only librarians and admins can create, update, or delete them.
     * @path /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId}
     * @allow (get) Any user can read book data.
     * @allow (list) Any user can list book data.
     * @allow (create) Only librarians and admins can create books.
     * @allow (update) Only librarians and admins can update books.
     * @allow (delete) Only librarians and admins can delete books.
     * @deny (create) Student cannot create a book.
     * @deny (update) Student cannot update a book.
     * @deny (delete) Student cannot delete a book.
     * @principle Enforces role-based access for book management.
     */
    match /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdminOrLibrarian();
      allow update: if isSignedIn() && isAdminOrLibrarian() && resource != null;
      allow delete: if isSignedIn() && isAdminOrLibrarian() && resource != null;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }

    function isAdminOrLibrarian() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'librarian'];
    }
  }
}