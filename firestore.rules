/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for a library application.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Access is restricted to the owning user.
 * - /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId}: Stores the library's book catalog in a hierarchical structure. Public read access, but only admins can modify.
 *
 * Key Security Decisions:
 * - Only admins can create, update, or delete books.
 * - Users can only read the book catalog.
 * - User listing is not allowed (explicitly denied).
 * - All write operations are validated for existence before modification or deletion.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the requested user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

     /**
      * @description Determines if the user is an admin based on their role in the user document.
      */
    function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Checks if the authenticated user owns the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    /**
     * @description Defines a rule for user documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get) User with UID 'user123' can read their profile if request.auth.uid == 'user123'.
     * @allow (update) User with UID 'user123' can update their profile if request.auth.uid == 'user123'.
     * @allow (delete) User with UID 'user123' can delete their profile if request.auth.uid == 'user123'.
     * @deny (create) User with UID 'user123' cannot create profile for 'user456'.
     * @deny (get) User with UID 'user123' cannot read profile for 'user456'.
     * @deny (update) User with UID 'user123' cannot update profile for 'user456'.
     * @deny (delete) User with UID 'user123' cannot delete profile for 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines rules for the book catalog.
     * @path /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId}
     * @allow (get) Any user can read a book's details.
     * @allow (list) Any user can list books.
     * @allow (create) Only admins can add books.
     * @allow (update) Only admins can update books.
     * @allow (delete) Only admins can delete books.
     * @deny (create) Non-admin user cannot create a book.
     * @deny (update) Non-admin user cannot update a book.
     * @deny (delete) Non-admin user cannot delete a book.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }
       match /{path=**}/books/{document} {
      allow list: if true;
    }
  }
}