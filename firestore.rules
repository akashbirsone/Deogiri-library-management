/**
 * @fileoverview Firestore Security Rules for the Library Application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and strict ownership.
 * Users can only manage their own profile data. Books are organized hierarchically and access is completely public.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId}:
 *   Stores book information, organized by department, course, semester, and subject.
 *
 * Key Security Decisions:
 * - User profiles are only accessible and modifiable by the owning user.
 * - Book listing is public, but book creation, updating, and deletion are disallowed.
 *
 * Denormalization for Authorization:
 *  N/A (No denormalization needed)
 *
 * Structural Segregation:
 *  User profiles and book catalog are kept in separate parts of the database.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (get, list) if the user is the owner of the profile.
     * @allow (create, update, delete) if the user is the owner of the profile.
     * @deny (get, list) if the user is not the owner of the profile.
     * @deny (create, update, delete) if the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to book information within the hierarchical structure.
     * @path /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId}
     * @allow (get, list) to everyone.
     * @deny (create, update, delete) to everyone.
     * @principle Allows public read access but restricts write access.
     */
    match /departments/{deptId}/courses/{courseId}/semesters/{semId}/subjects/{subjectId}/books/{bookId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }


    /**
     * @description Controls access to books in a collection group.
     * @path /books (collection group)
     * @allow (get, list) to everyone.
     * @deny (create, update, delete) to everyone.
     * @principle Allows public read access but restricts write access.
     */
    match /{path=**}/books/{document} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}